name: PR Security Check - Frontend Vulnerabilities Scan

on:
  pull_request:
    paths:
      - "frontend/**"
      - "frontend/package.json"
      - "frontend/yarn.lock"
      - ".github/workflows/security-frontend.yml"

permissions:
  contents: read
  actions: read

jobs:
  frontend-vulncheck:
    name: Scan Frontend Dependencies for Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies and jq
        run: |
          cd frontend
          corepack install -g yarn
          yarn install --frozen-lockfile
          
      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run security audit
        id: vuln-scan
        timeout-minutes: 5
        run: |
          echo "Running yarn audit on frontend dependencies..."

          cd frontend
          
          # Run audit and capture output (force JSON creation even with vulnerabilities)
          yarn audit --json --level=high || true > ../frontend_audit_output.json 2>/dev/null
          echo "Audit completed"
          cd ..

          # Parse audit results - use the convenient auditSummary object
          if [ -f "frontend_audit_output.json" ]; then
            # Debug: Show raw audit output structure
            echo "=== DEBUG: Raw audit output structure ==="
            head -10 frontend_audit_output.json
            echo "=== END DEBUG ==="

            # Extract vulnerability counts directly from auditSummary
            echo "=== DEBUG: Testing jq parsing ==="
            critical_count=$(jq 'select(.type == "auditSummary") | .data.vulnerabilities.critical' frontend_audit_output.json 2>/dev/null || echo "0")
            echo "Critical count parsed: $critical_count"
            high_count=$(jq 'select(.type == "auditSummary") | .data.vulnerabilities.high' frontend_audit_output.json 2>/dev/null || echo "0")
            echo "High count parsed: $high_count"
            moderate_count=$(jq 'select(.type == "auditSummary") | .data.vulnerabilities.moderate' frontend_audit_output.json 2>/dev/null || echo "0")
            echo "Moderate count parsed: $moderate_count"
            low_count=$(jq 'select(.type == "auditSummary") | .data.vulnerabilities.low' frontend_audit_output.json 2>/dev/null || echo "0")
            echo "Low count parsed: $low_count"
            info_count=$(jq 'select(.type == "auditSummary") | .data.vulnerabilities.info' frontend_audit_output.json 2>/dev/null || echo "0")
            echo "Info count parsed: $info_count"
            echo "=== END DEBUG ==="

            # If jq parsing failed (all zeros), try fallback method
            if [ "$critical_count" = "0" ] && [ "$high_count" = "0" ] && [ "$moderate_count" = "0" ]; then
              echo "=== DEBUG: Trying fallback parsing method ==="
              # Extract from auditSummary line using grep and sed
              audit_summary_line=$(grep '"type":"auditSummary"' frontend_audit_output.json)
              echo "Found auditSummary line: $audit_summary_line"

              if [ ! -z "$audit_summary_line" ]; then
                critical_count=$(echo "$audit_summary_line" | sed 's/.*"critical":\([0-9]*\).*/\1/')
                high_count=$(echo "$audit_summary_line" | sed 's/.*"high":\([0-9]*\).*/\1/')
                moderate_count=$(echo "$audit_summary_line" | sed 's/.*"moderate":\([0-9]*\).*/\1/')
                low_count=$(echo "$audit_summary_line" | sed 's/.*"low":\([0-9]*\).*/\1/')
                info_count=$(echo "$audit_summary_line" | sed 's/.*"info":\([0-9]*\).*/\1/')
                echo "Fallback parsing - Critical: $critical_count, High: $high_count, Moderate: $moderate_count, Low: $low_count, Info: $info_count"
              fi
              echo "=== END FALLBACK DEBUG ==="
            fi

            # Ensure variables are treated as integers
          critical_count=$((critical_count + 0))
          high_count=$((high_count + 0))
          total_vuln=$((critical_count + high_count))
            echo "=== FINAL: Total high+critical vulnerabilities: $total_vuln ==="

            if [ "$total_vuln" -gt 0 ]; then
              echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
              echo "Security vulnerabilities detected - this PR cannot be merged"
              echo "Critical: $critical_count, High: $high_count, Moderate: $moderate_count, Low: $low_count, Info: $info_count, Total: $total_vuln"
            else
              echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
              echo "No vulnerabilities found in frontend dependencies"
            fi
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found in frontend dependencies"
          fi
          
          # Fail the workflow if vulnerabilities were found
          if [ "$total_vuln" -gt 0 ]; then
            echo ""
            echo "WORKFLOW FAILED: Frontend security vulnerabilities detected!"
            echo "This PR cannot be merged until vulnerabilities are resolved."
            exit 1
          fi

      - name: Send Slack notification
        if: steps.vuln-scan.outputs.vulnerabilities_found == 'true'
        run: |
          # Get vulnerability details from audit output
          if [ -f "frontend_audit_output.json" ]; then
            VULN_DETAILS=$(jq -s -r '[.[] | select(.type == "auditAdvisory") | .data.advisory | select(.severity == "critical" or .severity == "high")] |
              .[] |
              "â€¢ \(.resolution.path): \(.severity | ascii_upcase) - \(.overview)",
              "  Severity: \(.severity | ascii_upcase)",
              "  Patched in: \(.patched_versions // "No patch available")",
              "  URL: \(.url)",
              ""' frontend_audit_output.json 2>/dev/null || echo "No vulnerability details available")
            
            # Truncate if too long for Slack
            if [ ${#VULN_DETAILS} -gt 1500 ]; then
              VULN_DETAILS="$VULN_DETAILS... (truncated, see full output in workflow logs)"
            fi
          else
            VULN_DETAILS="No vulnerability details available"
          fi

          # Escape special characters for Slack
          VULN_ESCAPED=$(echo "$VULN_DETAILS" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/' | tr -d '\n' | head -c 2000)
          if [ ${#VULN_DETAILS} -gt 2000 ]; then
            VULN_ESCAPED="$VULN_ESCAPED... (truncated, see full output in workflow logs)"
          fi

          SLACK_MESSAGE=$(cat <<EOF
          ðŸš¨ *FRONTEND SECURITY VULNERABILITIES DETECTED* ðŸš¨

          Repository: ${{ github.repository }}
          PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          Author: ${{ github.event.pull_request.user.login }}
          Branch: ${{ github.event.pull_request.head.ref }}

          This PR contains frontend security vulnerabilities and has been blocked from merging until fixed.

          *Vulnerability Details:*
          $VULN_ESCAPED

          ðŸ”§ *Actions needed:*
          1. Update affected dependencies: \`yarn upgrade <package>@<safe-version>\`
          2. Push updates to PR

          *PR Link:* ${{ github.event.pull_request.html_url }}
          EOF
          )

          if ! curl -X POST -H 'Content-type: application/json' \
               --max-time 10 \
               --silent \
               --fail \
               --data "{\"channel\":\"#unlockedv2-chat\",\"username\":\"Security Bot\",\"icon_emoji\":\":warning:\",\"text\":\"$SLACK_MESSAGE\"}" \
               "${{ secrets.SLACK_WEBHOOK_URL }}"; then
            echo "Warning: Failed to send Slack notification"
          else
            echo "Slack notification sent successfully to #unlockedv2-chat"
          fi
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Security check summary
        if: always()
        run: |
          if [ "${{ steps.vuln-scan.outputs.vulnerabilities_found }}" == 'true' ]; then
            echo ""
            echo "FRONTEND SECURITY CHECK FAILED"
            echo "This PR CANNOT be merged due to frontend security vulnerabilities."
            echo ""
            echo "To fix these vulnerabilities:"
            echo "  1. cd frontend"
            echo "  2. yarn upgrade <package>@<safe-version>"
            echo "  3. Push updates to your PR"
            echo ""
            echo "Slack notification sent to #unlockedv2-chat"
            echo ""
          else
            echo "FRONTEND SECURITY CHECK PASSED - No vulnerabilities found"
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-audit-report
          path: frontend_audit_output.json
          retention-days: 30
