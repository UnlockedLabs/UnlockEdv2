name: PR Security Check - Frontend Vulnerabilities Scan

on:
  pull_request:
    paths:
      - "frontend/**"
      - "frontend/package.json"
      - "frontend/yarn.lock"
      - ".github/workflows/security-frontend.yml"

permissions:
  contents: read
  actions: read

jobs:
  frontend-vulncheck:
    name: Scan Frontend Dependencies for Vulnerabilities
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies and jq
        run: |
          cd frontend
          corepack install -g yarn
          yarn install --frozen-lockfile
          
      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run security audit
        id: vuln-scan
        timeout-minutes: 5
        run: |
          echo "Running yarn audit on frontend dependencies..."

          cd frontend
          
          # Run audit and capture output directly
          audit_output=$(yarn audit --json --level=high 2>&1 || true)
          echo "Audit completed"
          cd ..

          # Parse audit results - directly extract from audit output
          if [ ! -z "$audit_output" ]; then
            # Get auditSummary line directly from the output
            audit_summary_line=$(echo "$audit_output" | grep '"type":"auditSummary"' || echo "")

            if [ ! -z "$audit_summary_line" ]; then
              # Direct extraction using jq on the auditSummary line
              critical_count=$(echo "$audit_summary_line" | jq -r '.data.vulnerabilities.critical // 0')
              high_count=$(echo "$audit_summary_line" | jq -r '.data.vulnerabilities.high // 0')

              # Ensure we have numbers, default to 0 if empty
              if [ -z "$critical_count" ] || [ "$critical_count" = "null" ]; then critical_count=0; fi
              if [ -z "$high_count" ] || [ "$high_count" = "null" ]; then high_count=0; fi
            else
              critical_count=0
              high_count=0
            fi

            moderate_count=0  # Won't exist with --level=high
            low_count=0        # Won't exist with --level=high
            info_count=0        # Won't exist with --level=high
            
            # Ensure variables are treated as integers
            critical_count=$((critical_count + 0))
            high_count=$((high_count + 0))
            total_vuln=$((critical_count + high_count))
            echo "=== DEBUG: critical_count=$critical_count, high_count=$high_count, total_vuln=$total_vuln ==="

            # Test the condition explicitly
            if (( total_vuln > 0 )); then
              echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
              echo "Security vulnerabilities detected - this PR cannot be merged"
              echo "Critical: $critical_count, High: $high_count, Moderate: $moderate_count, Low: $low_count, Info: $info_count, Total: $total_vuln"
              echo ""
              echo "PR BLOCKED: This PR cannot be merged until vulnerabilities are resolved."
            else
              echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
              echo "No vulnerabilities found in frontend dependencies"
            fi
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found in frontend dependencies"
          fi

      - name: Block PR from merging
        if: steps.vuln-scan.outputs.vulnerabilities_found == 'true'
        run: |
          echo "::error::Frontend security vulnerabilities detected - PR blocked from merging"
          exit 1

      - name: Send Slack notification
        if: steps.vuln-scan.outputs.vulnerabilities_found == 'true'
        run: |
          # Get vulnerability details from audit output
          if [ -f "frontend_audit_output.json" ]; then
            VULN_DETAILS=$(jq -r '[.[] | select(.type == "auditAdvisory" and .data.advisory.severity == "critical" or .data.advisory.severity == "high") | 
              "â€¢ \(.resolution.path): \(.severity | ascii_upcase) - \(.overview)",
              "  Severity: \(.severity | ascii_upcase)",
              "  Patched in: \(.patched_versions // "No patch available")",
              "  URL: \(.url)",
              "" | 
              join("\n")' frontend_audit_output.json 2>/dev/null || echo "No vulnerability details available")
            
            # Truncate if too long for Slack
            if [ ${#VULN_DETAILS} -gt 1500 ]; then
              VULN_DETAILS="$VULN_DETAILS... (truncated, see full output in workflow logs)"
            fi
          else
            VULN_DETAILS="No vulnerability details available"
          fi

          # Escape special characters for Slack
          VULN_ESCAPED=$(echo "$VULN_DETAILS" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/' | tr -d '\n' | head -c 2000)
          if [ ${#VULN_DETAILS} -gt 2000 ]; then
            VULN_ESCAPED="$VULN_ESCAPED... (truncated, see full output in workflow logs)"
          fi

          SLACK_MESSAGE=$(cat <<EOF
          ðŸš¨ *FRONTEND SECURITY VULNERABILITIES DETECTED* ðŸš¨

          Repository: ${{ github.repository }}
          PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          Author: ${{ github.event.pull_request.user.login }}
          Branch: ${{ github.event.pull_request.head.ref }}

          This PR contains frontend security vulnerabilities and has been blocked from merging until fixed.

          *Vulnerability Details:*
          $VULN_ESCAPED

          ðŸ”§ *Actions needed:*
          1. Update affected dependencies: \`yarn upgrade <package>@<safe-version>\`
          2. Push updates to PR

          *PR Link:* ${{ github.event.pull_request.html_url }}
          EOF
          )

          if ! curl -X POST -H 'Content-type: application/json' \
               --max-time 10 \
               --silent \
               --fail \
               --data "{\"channel\":\"#unlockedv2-chat\",\"username\":\"Security Bot\",\"icon_emoji\":\":warning:\",\"text\":\"$SLACK_MESSAGE\"}" \
               "${{ secrets.SLACK_WEBHOOK_URL }}"; then
            echo "Warning: Failed to send Slack notification"
          else
            echo "Slack notification sent successfully to #unlockedv2-chat"
          fi
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Security check summary
        if: always()
        run: |
          if [ "${{ steps.vuln-scan.outputs.vulnerabilities_found }}" == 'true' ]; then
            echo ""
            echo "FRONTEND SECURITY CHECK FAILED"
            echo "This PR CANNOT be merged due to frontend security vulnerabilities."
            echo ""
            echo "To fix these vulnerabilities:"
            echo "  1. cd frontend"
            echo "  2. yarn upgrade <package>@<safe-version>"
            echo "  3. Push updates to your PR"
            echo ""
            echo "Slack notification sent to #unlockedv2-chat"
            echo ""
          else
            echo "FRONTEND SECURITY CHECK PASSED - No vulnerabilities found"
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-audit-report
          path: frontend_audit_output.json
          retention-days: 30
